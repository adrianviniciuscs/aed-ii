1.
a) 89 vezes
passo a passo:
(gdb) l
1	#include <stdio.h>
2	int fibonacci (int n ) {
3		if (n <= 1) {
4			return n;
5		}
6		else {
7			return fibonacci(n - 1) + fibonacci(n - 2);
8		}
9	
10	}
(gdb) break 7 if n == 5
Breakpoint 1 at 0x1144: file fibonacci.c, line 7.
(gdb) ignore 1 10000
Will ignore next 10000 crossings of breakpoint 1.
(gdb) continue
The program is not being run.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/fibonacci 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) n
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[Inferior 1 (process 15758) exited normally]
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000555555555144 in fibonacci at fibonacci.c:7
	stop only if n == 5
	breakpoint already hit 89 times
	ignore next 9911 hits
(gdb) 

b)

(gdb) b 7
Breakpoint 1 at 0x1144: file fibonacci.c, line 7.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/fibonacci 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) n
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, fibonacci (n=15) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) backtrace
#0  fibonacci (n=15) at fibonacci.c:7
#1  0x000055555555517e in main () at fibonacci.c:13
(gdb) c
Continuing.

Breakpoint 1, fibonacci (n=14) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) backtrace
#0  fibonacci (n=14) at fibonacci.c:7
#1  0x0000555555555151 in fibonacci (n=15)
    at fibonacci.c:7
#2  0x000055555555517e in main () at fibonacci.c:13
(gdb) b 7 ignore 100000
malformed linespec error: unexpected string, "ignore 100000"
(gdb) ignore 1 1000000
Will ignore next 1000000 crossings of breakpoint 1.
(gdb) continue
Continuing.
[Inferior 1 (process 15977) exited normally]
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000555555555144 in fibonacci at fibonacci.c:7
	breakpoint already hit 986 times
	ignore next 999016 hits
(gdb) 


(gdb) b 7 
Breakpoint 1 at 0x1144: file fibonacci.c, line 7.
(gdb) ignore 1 985
Will ignore next 985 crossings of breakpoint 1.
(gdb) c
The program is not being run.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/fibonacci 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) n
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, fibonacci (n=2) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) c
Continuing.
[Inferior 1 (process 16048) exited normally]
(gdb) backtrace
No stack.
(gdb) ignore 1 984
Will ignore next 984 crossings of breakpoint 1.
(gdb) delete 1
(gdb) delete 1
No breakpoint number 1.
(gdb) b 7
Breakpoint 2 at 0x555555555144: file fibonacci.c, line 7.
(gdb) ignore 1 980
No breakpoint number 1.
(gdb) ignore 2 980
Will ignore next 980 crossings of breakpoint 2.
(gdb) c
The program is not being run.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/fibonacci 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 2, fibonacci (n=4) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) c
Continuing.

Breakpoint 2, fibonacci (n=3) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) c
Continuing.

Breakpoint 2, fibonacci (n=2) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) c
Continuing.

Breakpoint 2, fibonacci (n=2) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) c
Continuing.

Breakpoint 2, fibonacci (n=3) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) c
Continuing.

Breakpoint 2, fibonacci (n=2) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x0000555555555144 in fibonacci at fibonacci.c:7
	breakpoint already hit 986 times
(gdb) backtrace
#0  fibonacci (n=2) at fibonacci.c:7
#1  0x0000555555555151 in fibonacci (n=3)
    at fibonacci.c:7
#2  0x0000555555555160 in fibonacci (n=5)
    at fibonacci.c:7
#3  0x0000555555555160 in fibonacci (n=7)
    at fibonacci.c:7
#4  0x0000555555555160 in fibonacci (n=9)
    at fibonacci.c:7
#5  0x0000555555555160 in fibonacci (n=11)
    at fibonacci.c:7
#6  0x0000555555555160 in fibonacci (n=13)
--Type <RET> for more, q to quit, c to continue without paging--
    at fibonacci.c:7
#7  0x0000555555555160 in fibonacci (n=15)
    at fibonacci.c:7
#8  0x000055555555517e in main () at fibonacci.c:13
(gdb) c
Continuing.
[Inferior 1 (process 16062) exited normally]

c)

(gdb) break 7 if n == 14
Breakpoint 1 at 0x1144: file fibonacci.c, line 7.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/fibonacci 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) n
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, fibonacci (n=14) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) step
fibonacci (n=13) at fibonacci.c:3
3		if (n <= 1) {
(gdb) c
Continuing.
[Inferior 1 (process 16188) exited normally]
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/fibonacci 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, fibonacci (n=14) at fibonacci.c:7
7			return fibonacci(n - 1) + fibonacci(n - 2);
(gdb) step
fibonacci (n=13) at fibonacci.c:3
3		if (n <= 1) {
(gdb) 

codigo 2
a)

(gdb) break opmat
Function "opmat" not defined.
Make breakpoint pending on future shared library load? (y or [n]) n
(gdb) break operacaoMatematica
Breakpoint 1 at 0x1197: file opmat.c, line 5.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/opmat 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) n
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Digite o primeiro numero: 10
Digite o segundo numero: 20

Breakpoint 1, operacaoMatematica (a=10, b=20)
    at opmat.c:5
5	    while (b != 0) {
(gdb)

[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Digite o primeiro numero: 10
Digite o segundo numero: 20

Breakpoint 1, operacaoMatematica (a=10, b=20)
    at opmat.c:5
5	    while (b != 0) {
(gdb) backtrace
#0  operacaoMatematica (a=10, b=20) at opmat.c:5
#1  0x0000555555555242 in main () at opmat.c:21
(gdb) 


(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/opmat 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Digite o primeiro numero: 10
Digite o segundo numero: 0

Breakpoint 1, operacaoMatematica (a=10, b=0)
    at opmat.c:5
5	    while (b != 0) {
(gdb) c
Continuing.
O resultado da operacao entre 10 e 0 é: 10
[Inferior 1 (process 16551) exited normally]


(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/opmat 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Digite o primeiro numero: 10
Digite o segundo numero: 10

Breakpoint 1, operacaoMatematica (a=10, b=10)
    at opmat.c:5
5	    while (b != 0) {
(gdb) next
6	        r = a % b;
(gdb) next
7	        a = b;
(gdb) next
8	        b = r;
(gdb) next
5	    while (b != 0) {
(gdb) next
10	    return a;
(gdb) next
11	}
(gdb) next
main () at opmat.c:23
23	    printf("O resultado da operacao entre %d e %d é: %d\n", num1, num2, res);
(gdb) next
O resultado da operacao entre 10 e 10 é: 10
25	    return 0;


[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Digite o inicio do intervalo: 1
Digite o fim do intervalo: 20

Breakpoint 1, ehPrimoRecursivo (n=1, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) next
6	        return (n == 2);
(gdb) next
15	}
(gdb) next
imprimirPrimosIntervalo (inicio=1, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) next

Breakpoint 1, ehPrimoRecursivo (n=2, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) next
6	        return (n == 2);
(gdb) next
15	}
(gdb) next
imprimirPrimosIntervalo (inicio=2, fim=20)
    at primos.c:23
23	        printf("%d ", inicio);
(gdb) next
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) next

Breakpoint 1, ehPrimoRecursivo (n=3, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) next
8	    if (n % i == 0) {
(gdb) next
11	    if (i * i > n) {
(gdb) next
12	        return 1;
(gdb) next
15	}
(gdb) nex
Ambiguous command "nex": next, nexti.
(gdb) n
imprimirPrimosIntervalo (inicio=3, fim=20)
    at primos.c:23
23	        printf("%d ", inicio);
(gdb) n
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=4, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=4, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=5, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=5, i=3) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
12	        return 1;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=5, fim=20)
    at primos.c:23
23	        printf("%d ", inicio);
(gdb) n
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=6, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=6, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=7, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=7, i=3) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
12	        return 1;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=7, fim=20)
    at primos.c:23
23	        printf("%d ", inicio);
(gdb) n
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=8, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=8, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=9, i=2) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=9, i=3) at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=9, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=10, i=2)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=10, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=11, i=2)
    at primos.c:5
5	    if (n <= 2) {
(gdb) 
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=11, i=3)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=11, i=4)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
12	        return 1;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=11, fim=20)
    at primos.c:23
23	        printf("%d ", inicio);
(gdb) n
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=12, i=2)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=12, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=13, i=2)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=13, i=3)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=13, i=4)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
12	        return 1;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=13, fim=20)
    at primos.c:23
23	        printf("%d ", inicio);
(gdb) n
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=14, i=2)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
9	        return 0;
(gdb) n
15	}
(gdb) n
imprimirPrimosIntervalo (inicio=14, fim=20)
    at primos.c:25
25	    imprimirPrimosIntervalo(inicio + 1, fim);
(gdb) n

Breakpoint 1, ehPrimoRecursivo (n=15, i=2)
    at primos.c:5
5	    if (n <= 2) {
(gdb) n
8	    if (n % i == 0) {
(gdb) n
11	    if (i * i > n) {
(gdb) n
14	    return ehPrimoRecursivo(n, i + 1);
(gdb) 



ehPrimoRecursivo(10, 2)
  |
  |- ehPrimoRecursivo(11, 2)
  |   |
  |   |- ehPrimoRecursivo(12, 2)
  |   |   |
  |   |   |- ... (continua para os demais números até 20)
  |   |
  |   |- ehPrimoRecursivo(13, 2)
  |   |   |
  |   |   |- ...
  |
  |- ehPrimoRecursivo(14, 2)
  |   |
  |   |- ...
  |
  |- ...

Conte o número de chamadas recursivas observando quantas vezes ehPrimoRecursivo é chamada para cada número no intervalo de 10 a 20. Cada chamada recursiva adiciona uma profundidade à árvore de chamadas.


(gdb) break gerarNumerosAleatorios 
Breakpoint 1 at 0x11e3: file random.c, line 10.
(gdb) run
Starting program: /home/adrian/UFERSA/III/Algoritmos e Estrutura de Dados II - PEX1246/aedii/lab/lista1/random 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) 
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, gerarNumerosAleatorios () at random.c:10
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (-29, 21)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (-13, -11)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (9, 24)
10	    for (i = 0; i < 100; i++) {
(gdb) Quit
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (28, -34)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (19, -45)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (-29, -1)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (-46, -32)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (6, -50)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) nn
Undefined command: "nn".  Try "help".
(gdb) n
12	        int py = randomInRange(-50, 50);
(gdb) n
13	        printf("P = (%d, %d)\n", px, py);
(gdb) n
P = (9, 50)
10	    for (i = 0; i < 100; i++) {
(gdb) n
11	        int px = randomInRange(-50, 50);
(gdb) n
12	        int py = randomInRange(-50, 50);
